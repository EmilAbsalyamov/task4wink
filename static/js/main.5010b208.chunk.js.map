{"version":3,"sources":["components/Episode.jsx","App.js","reportWebVitals.js","index.js","components/Episode.module.css"],"names":["Episode","props","className","selected","episode","s","imageBlock","src","alt","duration","description","live","status","tabIndex","liveStatus","circle","App","dataFromAPI","useState","setSelected","useEventListener","key","length","window","scrollBy","episodes","map","e","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"0OAmCeA,EAhCC,SAACC,GAmBd,OACG,sBAAKC,UAAYD,EAAME,WAAaF,EAAMG,QAAWC,IAAED,QAAU,IAAMC,IAAEF,SAAWE,IAAED,QAAtF,UACG,sBAAKF,UAAWG,IAAEC,WAAlB,UACG,qBAAKC,IAAI,uCAAuCC,IAAK,cAAgBP,EAAMG,QAAU,aACrF,uBAAMF,UAAWG,IAAEI,SAAnB,cAA+BR,EAAMQ,SAAW,uBAAhD,UAEH,sBAAKP,UAAWG,IAAEK,YAAlB,UACG,+BAAOT,EAAMG,QAAU,iDAtBzBH,EAAMU,KAEJ,sBAAKT,UAAWG,IAAEO,OAAQC,SAAS,IAAnC,UACG,8BAAMZ,EAAMW,SACZ,sBAAKV,UAAWG,IAAES,WAAlB,UACG,qBAAKZ,UAAWG,IAAEU,SAClB,iEAKD,sBAAKb,UAAWG,IAAEO,OAAlB,cAA4BX,EAAMW,OAAlC,c,OCoGFI,MAjHf,WAEE,IAAMC,EAAc,CAClB,CACEb,QAAS,EACTK,SAAU,GACVG,OAAQ,mDACRD,MAAM,GAER,CACEP,QAAS,EACTK,SAAU,GACVG,OAAQ,mDACRD,MAAM,GAER,CACEP,QAAS,EACTK,SAAU,GACVG,OAAQ,mDACRD,MAAM,GAER,CACEP,QAAS,EACTK,SAAU,GACVG,OAAQ,iCACRD,MAAM,GAER,CACEP,QAAS,EACTK,SAAU,GACVG,OAAQ,iCACRD,MAAM,GAER,CACEP,QAAS,EACTK,SAAU,GACVG,OAAQ,iCACRD,MAAM,GAER,CACEP,QAAS,EACTK,SAAU,GACVG,OAAQ,iCACRD,MAAM,GAER,CACEP,QAAS,EACTK,SAAU,GACVG,OAAQ,iCACRD,MAAM,GAER,CACEP,QAAS,EACTK,SAAU,GACVG,OAAQ,iCACRD,MAAM,GAER,CACEP,QAAS,GACTK,SAAU,GACVG,OAAQ,iCACRD,MAAM,GAER,CACEP,QAAS,GACTK,SAAU,GACVG,OAAQ,iCACRD,MAAM,IAIV,EAAgCO,mBAAS,GAAzC,mBAAOf,EAAP,KAAiBgB,EAAjB,KAeAC,YAAiB,WAbC,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACdlB,EAAWc,EAAYK,QAAmB,cAARD,GACrCF,EAAYhB,EAAW,GACvBoB,OAAOC,SAAS,EAAG,MAKXrB,EAAW,GAAc,YAARkB,IACzBF,EAAYhB,EAAW,GACvBoB,OAAOC,SAAS,GAAI,SAYxB,IAAMC,EAAWR,EAAYS,KAAI,SAACC,GAChC,OACE,cAAC,EAAD,CAASxB,SAAUA,EAAUC,QAASuB,EAAEvB,QACtCK,SAAUkB,EAAElB,SAAUG,OAAQe,EAAEf,OAChCD,KAAMgB,EAAEhB,MAAWgB,EAAEvB,YAI3B,OACE,qBAAKF,UAAU,MAAf,SACE,sBAAKA,UAAW,UAAhB,UACA,yEACGuB,QCpGMG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1Bb,K,kBCZAc,EAAOC,QAAU,CAAC,QAAU,yBAAyB,WAAa,4BAA4B,SAAW,0BAA0B,YAAc,6BAA6B,OAAS,wBAAwB,WAAa,4BAA4B,OAAS,wBAAwB,SAAW,6B","file":"static/js/main.5010b208.chunk.js","sourcesContent":["import React from 'react';\nimport s from './Episode.module.css';\n\nconst Episode = (props) => {\n   //отлавливаю статус 'идёт' и в зависимости от него отрисовываю,\n   //если бы этот статус приходил динамично с сервера,я бы применил useEffect чтобы отследить изменения и вызывать //////функцию только в случае если придут измененные данные,ну и применил бы connect,если бы в приложении использовался //бы redux.\n   const statusBlock = () => {\n      if (props.live) {\n         return(\n            <div className={s.status} tabIndex=\"0\">\n               <div>{props.status}</div>\n               <div className={s.liveStatus}>\n                  <div className={s.circle}></div>\n                  <div>Идёт</div>\n               </div>           \n         </div>\n         )}\n      else {\n         return (<div className={s.status}> {props.status} </div>)\n      }\n   }\n   //просто отображаю данные из пропсов и в зависимости от статуса selected применям нужным нам класс стилей\n   return (\n      <div className={(props.selected === props.episode) ? s.episode + ' ' + s.selected : s.episode}>\n         <div className={s.imageBlock}>\n            <img src=\"https://pics.sl/9e9/200/12cfbb0b.jpg\" alt={'SerialName ' + props.episode + ' episode'} />\n            <span className={s.duration}> {props.duration + ' мин.'} </span>\n         </div>\n         <div className={s.description}>\n            <span>{props.episode + '-ая серия'}</span>\n            {statusBlock()}\n         </div>\n      </div>\n   )\n}\nexport default Episode;","import React, {useState} from 'react';\nimport './App.css';\nimport Episode from './components/Episode';\nimport useEventListener from '@use-it/event-listener'\n\nfunction App() {\n  // Дата которая якобы пришла к нам с бэка\n  const dataFromAPI = [\n    {\n      episode: 1,\n      duration: 23,\n      status: 'Доступно',\n      live: false\n    },\n    {\n      episode: 2,\n      duration: 20,\n      status: 'Доступно',\n      live: false\n    },\n    {\n      episode: 3,\n      duration: 25,\n      status: 'Доступно',\n      live: true\n    },\n    {\n      episode: 4,\n      duration: 19,\n      status: 'Скоро',\n      live: false\n    },\n    {\n      episode: 5,\n      duration: 20,\n      status: 'Скоро',\n      live: false\n    },\n    {\n      episode: 6,\n      duration: 23,\n      status: 'Скоро',\n      live: false\n    },\n    {\n      episode: 7,\n      duration: 27,\n      status: 'Скоро',\n      live: false\n    },\n    {\n      episode: 8,\n      duration: 21,\n      status: 'Скоро',\n      live: false\n    },\n    {\n      episode: 9,\n      duration: 25,\n      status: 'Скоро',\n      live: false\n    },\n    {\n      episode: 10,\n      duration: 18,\n      status: 'Скоро',\n      live: false\n    },\n    {\n      episode: 11,\n      duration: 22,\n      status: 'Скоро',\n      live: false\n    }\n  ]\n  // local state для хранения выбранного компонента\n  const [selected, setSelected] = useState(1) \n\n  const arrowKeys = ({ key }) => {\n    if ((selected < dataFromAPI.length) && key === 'ArrowDown') {\n      setSelected(selected + 1)\n      window.scrollBy(0, 137)\n      //тут подразумевалась работа с options чтобы сделать behavior: 'smooth'(чтобы скрол стал плавным) , но так и не получилось это\n      //реализовать.\n      //Думаю можно было бы навесить реф на каждый компонент и следить за положением на странице и делать скрол в зависимости от положения,но // насколько мне известно ,нужно стараться не использовать рефы,поэтому выбрал данное решение]\n    }\n    else if ((selected > 1) && key === 'ArrowUp') {\n      setSelected(selected - 1)\n      window.scrollBy(0, -137);\n    }\n  }\n  useEventListener('keydown', arrowKeys);\n//никогда до этого не сталкивался с такой задачей,весь вечер вот провел на stackoverflow уверен что решение не оптимальное но крайне не \n//хотелось лезть в DOM используюя рефы.Очень заинтересовали подобного рода задачи на работу с keyboardEvent)\n//возможно я допустил архитектурные ошибки,тк давно не работал без апишки и редакса,в основном стараюсь строить работу с данными с thunk -ах \n//и максимально разгружать UI от логики.\n//Решение подобных задач мне было бы интересно при работе в компании)\n//Если нужно что то подправить или переделать,жду отклика,но старался писать так как сам представляю работу с ивентами клавиатуры\n\n  \n  const episodes = dataFromAPI.map((e) => {\n    return (\n      <Episode selected={selected} episode={e.episode}\n        duration={e.duration} status={e.status}\n        live={e.live} key={e.episode} />)\n  })\n\n\n  return (\n    <div className=\"App\">\n      <div className={'content'}>\n      <h1>1-й сезон</h1>\n        {episodes}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"episode\":\"Episode_episode__FGvEa\",\"imageBlock\":\"Episode_imageBlock__3RgFE\",\"duration\":\"Episode_duration__2Iys1\",\"description\":\"Episode_description__4-OjX\",\"status\":\"Episode_status__-7U6a\",\"liveStatus\":\"Episode_liveStatus__1K_op\",\"circle\":\"Episode_circle__HGZdl\",\"selected\":\"Episode_selected__pcEKE\"};"],"sourceRoot":""}